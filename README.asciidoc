image:https://api.travis-ci.org/spylik/erlroute.svg?branch=master[title="Build Status", link="https://travis-ci.org/spylik/erlroute"]

= Erlroute

Erlroute is the simple message router designed for link:http://www.jpaulmorrison.com/fbp/index.shtml [Flow Based Programming paradigm].

The main idea is to use erlroute:pub everywhere, where you may require the data now or in the future. 

Actually, erlroute do simple job - it just send messages to an unknown number of subscribers.

== Why just do not use AMQP broker for this purpose?

Sure, FBP paradigm also could be implemented with AMQP-broker.
But with amqp-broker, you also going to deal with all amq protocol routine - open connection from producer, create channel, push message, open connection from subscriber, subscribe, pull message, etc. After all of this overheads you could have bad performance.

Erlroute simple, fast and designed only for manage message routes inside your Erlang applications.

== When erlroute useful for you and when not so?
* Erlroute useful if you are going to design dynamically environment where one group of processes (listeners) in some cases may require data from other processes (producers) and in some another cases - do not.
* Erlroute useful during development - you don't need anymore to think in advance about you may require the data from this line of code somwhere in future or not.
* Erlroute useful to avoid construction like:

[source,erlang]
----
SomeData = {time, erlang:system_time()},
process1 ! SomeData,
process2 ! SomeData,
process3 ! SomeData,
process4 ! SomeData,
process5 ! SomeData,
process6 ! SomeData.
----
With erlroute you can write just: 
[source,erlang]
----
% ?MODULE - test
erlroute:pub(<<"some_test_topic">>, {time, erlang:system_time()}).
----
And then, subscibers could easy to subscribe:

[source,erlang]
----
erlroute:sub(<<"some_test_topic">>).
----

* Erlroute not useful if you are going to produce data which may required by applications written in other languages. In this case the best way is to use AMQP-broker. Erlroute designed only for internal erlang routes.

== Erlroute for evolutionary Neural Networks and Genetic Algorithm.
Erlroute actually do same job as axons and dendrits. Some neuron generate and produce signals and other neurons receiving signals via dendrites. In erlroute axon output is erlroute:pub and dendites could be linked to axons by erlroute:sub. With erlroute able to implement neuron evolution as well - you can obtain full list of availiable producers and topics and randomly create new links with erlroute:sub and destroy it with erlroute:unsub during your software evolution.

== Key feutures

* erlroute:pub/2
* erlroute:sub_by_topic
* erlroute:sub_by_process
* erlroute:sub_by_module
* erlroute:get_subscribers_by_topic/1
* erlroute:get_subscribers_by_module/1
* erlroute:get_subscribers_by_process/1
* erlroute:get_producers_by_topic
* erlroute:get_topics_from_module
* erlroute:get_topics_from_pid
